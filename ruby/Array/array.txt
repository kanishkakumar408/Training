1. accessing element :-

2.7.1 :002 > ary=[1,2,3,4,5,6]
2.7.1 :003 > ary[2]
 => 3 

another method

2.7.1 :004 > ary.at(2)
 => 3 

2. 
adding element in array
2.7.1 :005 > arr=[1,2,3,4]
2.7.1 :006 > arr<<5
 => [1, 2, 3, 4, 5] 

at any position 
2.7.1 :007 > arr.insert(2,3)
 => [1, 2, 3, 3, 4, 5] 

3. Removing item from array
 => [1, 2, 3, 3, 4, 5] 
2.7.1 :008 > arr.pop(3)
 => [3, 4, 5] 

at particular index
2.7.1 :009 > arr=[1,2,3,4,5]
2.7.1 :010 > arr.delete_at(3)
 => 4 

4. Iterating over array
2.7.1 :011 > arr=[1,2,3,4,5]
2.7.1 :012 > arr.each {|a| print a -=10, " "}
-9 -8 -7 -6 -5  => [1, 2, 3, 4, 5] 

reversing string -
2.7.1 :001 > words = %w[one two three four five]
2.7.1 :002 > str=""
2.7.1 :003 > words.reverse_each{|words| str+= "#{words}"}
 => ["one", "two", "three", "four", "five"] 
2.7.1 :004 > p str
"fivefourthreetwoone"
 => "fivefourthreetwoone" 

selecting and rejecting (non destructive)-
2.7.1 :001 > arr=[1,2,3,4,5,6]
2.7.1 :002 > arr.select{|a| a>3}
 => [4, 5, 6] 
2.7.1 :003 > arr.reject{|a| a<3}
 => [3, 4, 5, 6] 

selecting and rejecting(destructive) -
2.7.1 :004 > arr.delete_if {|a| a<4}
 => [4, 5, 6] 

2.7.1 :007 > arr.keep_if{|a| a<4}
 => [1, 2, 3] 

5. New(array) from existing -
2.7.1 :001 > arr=["mat", "henry"]
2.7.1 :002 > ary=Array.new(arr)
2.7.1 :003 > arr.eql?ary
 => true 
2.7.1 :004 > p ary
["mat", "henry"]
 => ["mat", "henry"] 
2.7.1 :005 > arr
 => ["mat", "henry"] 
2.7.1 :006 > 


6. ary & other_ary- new_ary (intersection) :-
2.7.1 :001 > [1,2,3,4,5,6,7] & [2,4,6,3]
 => [2, 3, 4, 6] 

7. ary | other_ary - new_ary(union) :-
2.7.1 :002 > [1,2,3,4,5,6,7] | [2,4,6,3,8]
 => [1, 2, 3, 4, 5, 6, 7, 8] 

8. ary + other_ary - new_ary :-
2.7.1 :003 > [1,2,3] + [2,3,4,5]
 => [1, 2, 3, 2, 3, 4, 5]

9. ary - other_ary -> new_ary :-
2.7.1 :006 > [1,2,3,4,5]-[2,3]
 => [1, 4, 5] 

10. ary<<obj - new_ary :-
2.7.1 :008 > a<<"c"<<"f"<<[4,5]
 => [1, 2, "c", "f", [4, 5]] 

11. arr<=>other_ary- -1,0,+1 :-
2.7.1 :009 > [1,3,5,7,6]<=>[1,2,3,4,5,6,7]
 => 1 

12. arr==other_arr :-
2.7.1 :009 > [1,3,5,7,6]==[1,2,3,4,5,6,7]
 => false

13. ary[index] :-
2.7.1 :013 > a=["a","b","c","d","e"]
2.7.1 :014 > a[2]+a[4]
 => "ce" 

14. ary[index,lenght]- new_ary :-
2.7.1 :016 > a=["a","b","c","d","e"]
2.7.1 :017 > a[2,4]
 => ["c", "d", "e"] 

15. .bsearch{|x| blocl}-> ele :-
2.7.1 :024 > arr=[1,2,3,5,6,7,8,9]
2.7.1 :025 > arr.bsearch{|x| x>=4}
 => 5 

16. clear - ary :-
2.7.1 :001 > a=[1,2,3,4,5,6]
2.7.1 :002 > a.clear
 => [] 

17. collect and collect!{|item| block} - new_ary :-
2.7.1 :003 > a=["a","b","c","d","e"]
2.7.1 :004 > a.map! {|x| x + "!"}
 => ["a!", "b!", "c!", "d!", "e!"] 
2.7.1 :005 > a.collect!.with_index {|x,i| x[0...1]}
 => ["a", "b", "c", "d", "e"] 

18. combination -
2.7.1 :006 > a=[1,2,3,4,5]
2.7.1 :007 > a.combination(1).to_a
 => [[1], [2], [3], [4], [5]] 
2.7.1 :008 > a.combination(2).to_a
 => 2.7.1 :006 > a=[1,2,3,4,5]
2.7.1 :007 > a.combination(1).to_a
 => [[1], [2], [3], [4], [5]] 
2.7.1 :008 > a.combination(2).to_a
 => [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]] 
[[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]] 

19. .compact:-
 2.7.1 :009 > [1,nil,2,nil,3,nil,4].compact
 => [1, 2, 3, 4] 

20. .concat :-
2.7.1 :013 > ["1","2"].concat(["2","3","4"])
 => ["1", "2", "2", "3", "4"] 

21. .count-
2.7.1 :014 > arr=[1,3,2,4,3,5,4,56]
2.7.1 :015 > arr.count
 => 8 

22. .difference :-
2.7.1 :016 > [1,3,5,2,6,8,5,4].difference([1,9,8,5])
 => [3, 2, 6, 4] 

23. .empty? -
2.7.1 :020 > [].empty?
 => true 

24. eql?
2.7.1 :023 > [1,2,3].eql?([1,2,3])
 => true 

25. fetch :-
2.7.1 :024 > a=["a","b","c"]
2.7.1 :025 > a.fetch(1)
 => "b" 

26. first :-
2.7.1 :026 > a=["a","b","c"]
2.7.1 :027 > a.first(2)
 => ["a", "b"] 

27. include :-
2.7.1 :029 > a=["a","b","c"]
2.7.1 :030 > a.include?("b")
 => true 

28. Insert :-
2.7.1 :031 > a=["a","b","c"]
2.7.1 :032 > a.insert(2,"e")
 => ["a", "b", "e", "c"] 

29. Join -
2.7.1 :031 > a=["a","b","c"]
2.7.1 :032 > a.insert(2,"e")
 => ["a", "b", "e", "c"] 
2.7.1 :033 > ["a","b","c"].join
 => "abc" 
2.7.1 :034 > ["a","b","c"].join("-")
 => "a-b-c" 

30. last -
2.7.1 :035 > a=["a","b","c"]
2.7.1 :036 > a.last(1)
 => ["c"] 

31. length -
2.7.1 :038 > a=["a","b","c"]
2.7.1 :039 > a.length
 => 3 

32. min -
2.7.1 :003 > ar=%w(horse dog cat elephant)
2.7.1 :004 > ar.min
 => "cat" 

33. max -
2.7.1 :005 > ar=%w(horse dog cat elephant)
2.7.1 :006 > ar.max
 => "horse"

34. permutation -
2.7.1 :007 > a=[1,2,3]
2.7.1 :008 > a.permutation.to_a
 => [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] 
2.7.1 :009 > a.permutation(2).to_a
 => [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] 
2.7.1 :010 > a.permutation(1).to_a
 => [[1], [2], [3]] 

35. Product :-
2.7.1 :007 > a=[1,2,3]
2.7.1 :008 > a.permutation.to_a
 => [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] 
2.7.1 :009 > a.permutation(2).to_a
 => [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] 
2.7.1 :010 > a.permutation(1).to_a
 => [[1], [2], [3]] 
2.7.1 :011 > [1,2,3].product([1,2])
 => [[1, 1], [1, 2], [2, 1], [2, 2], [3, 1], [3, 2]] 

36. push -
2.7.1 :015 > [1,2,3].push(4)
 => [1, 2, 3, 4] 

37. reverse -
2.7.1 :016 > ["a","b","c"].reverse
 => ["c", "b", "a"] 

38. sort -
2.7.1 :017 > a=["s","p","t","q","r"]
2.7.1 :018 > a.sort
 => ["p", "q", "r", "s", "t"] 

39. Sum -
2.7.1 :019 > [2,4,4].sum
 => 10 


40. take -
2.7.1 :005 > a=[1,2,3,4,5,6,7,8,9]
2.7.1 :006 > a.take(3)
 => [1, 2, 3] 

41. union -
2.7.1 :009 > ["a","b","c"].union(["e","b","a","f"])
 => ["a", "b", "c", "e", "f"] 

42. Uniq -
2.7.1 :010 > a=["q","a","b","q","s","b"]
2.7.1 :011 > a.uniq
 => ["q", "a", "b", "s"] 








